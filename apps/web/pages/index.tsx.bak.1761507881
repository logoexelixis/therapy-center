import React, { useEffect, useMemo, useState } from 'react';
import { useRouter } from 'next/router';
import { supabase } from '../lib/supabaseClient';

// Σταθερά ωραρίου: 13:30–15:45, διάλειμμα 15:45–16:15, 16:15–21:30, ανά 45'
function makeDaySlots() {
  const times: string[] = [];
  const toStr = (d: Date) => d.toTimeString().slice(0,5);
  const pushRange = (start: string, end: string) => {
    const [sh, sm] = start.split(':').map(Number);
    const [eh, em] = end.split(':').map(Number);
    const d = new Date();
    d.setHours(sh, sm, 0, 0);
    const endD = new Date();
    endD.setHours(eh, em, 0, 0);
    while (d <= endD) {
      times.push(toStr(d));
      d.setMinutes(d.getMinutes() + 45);
    }
  };
  pushRange('13:30', '15:45');
  pushRange('16:15', '21:30');
  return times;
}

// Η σειρά που θέλεις για τους θεραπευτές (admin view)
const DESIRED_ORDER = [
  'Τσάλη Χριστίνα',
  'Χοτζάρ Οζτζάν',
  'Μπατζάκ Χαρούν',
  'Παπαδοπούλου Ηλιάνα',
  'Γεωργιάδου Χριστίνα',
  'Κοτζά Ναζλή',
  'Μουμίν Φατμέ',
  'Ποιμενίδου Μαρία',
];

type Therapist = { id: string; full_name: string; is_admin?: boolean };
type Appt = {
  id: string;
  therapist_id: string;
  client_id: string;
  start_dt: string;
  status: 'SCHEDULED' | 'PRESENT' | 'CANCELLED_ON_TIME' | 'NO_SHOW';
  is_paid: boolean | null;
  clients?: { full_name: string } | null;
  therapists?: { full_name: string } | null;
};

export default function Home() {
  const router = useRouter();
  const [date, setDate] = useState<string>(() => new Date().toISOString().slice(0,10));
  const [me, setMe] = useState<Therapist | null>(null);
  const [isAdmin, setIsAdmin] = useState<boolean>(false);
  const [therapists, setTherapists] = useState<Therapist[]>([]);
  const [appts, setAppts] = useState<Appt[]>([]);
  const [loading, setLoading] = useState(true);
  const slots = useMemo(()=>makeDaySlots(),[]);

  // Auth gate + ποιος είμαι
  useEffect(() => {
    const sub = supabase.auth.onAuthStateChange((_event, session)=> {
      if (!session) router.replace('/login');
    });

    (async () => {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) { router.replace('/login'); return; }

      // Βρες τον therapist record μου
      const meRes = await supabase
        .from('therapists')
        .select('id, full_name, is_admin')
        .eq('auth_user_id', user.id)
        .maybeSingle();

      if (meRes.error) {
        console.error('therapists(me) error', meRes.error);
      }
      const meRow = meRes.data ?? null;
      setMe(meRow);
      setIsAdmin(!!meRow?.is_admin);

      // Αν είμαι admin, φέρε ΟΛΟΥΣ και κάνε sort με DESIRED_ORDER
      // Αν είμαι θεραπευτής, ΔΕΝ χρειάζεται να φέρουμε όλους — δείχνουμε μόνο εμένα
      if (meRow?.is_admin) {
        const thRes = await supabase.from('therapists').select('id, full_name').order('full_name');
        let list = thRes.data ?? [];
        list.sort((a,b) => DESIRED_ORDER.indexOf(a.full_name) - DESIRED_ORDER.indexOf(b.full_name));
        setTherapists(list);
      } else if (meRow) {
        setTherapists([meRow]);
      }

      setLoading(false);
    })();

    return () => { sub.data?.subscription.unsubscribe(); };
  }, [router]);

  // Φόρτωσε ραντεβού ημέρας (admin = όλα, therapist = μόνο δικά του)
  useEffect(() => {
    if (!me) return;

    (async () => {
      const start = `${date}T00:00:00.000Z`;
      const nextDay = new Date(date + 'T00:00:00.000Z');
      nextDay.setUTCDate(nextDay.getUTCDate() + 1);
      const end = nextDay.toISOString();

      let q = supabase
        .from('appointments')
        .select('id, therapist_id, client_id, start_dt, status, is_paid, clients(full_name), therapists(full_name)')
        .gte('start_dt', start)
        .lt('start_dt', end);

      if (!isAdmin) {
        q = q.eq('therapist_id', me.id);
      }

      const { data, error } = await q;
      if (error) {
        console.error('appointments error', error);
        setAppts([]);
        return;
      }
      setAppts(data ?? []);
    })();
  }, [me, isAdmin, date]);

  const mapByTherapist: Record<string, Record<string, Appt>> = useMemo(()=>{
    const m: Record<string, Record<string, Appt>> = {};
    for (const a of appts) {
      const t = a.therapist_id;
      const time = new Date(a.start_dt).toTimeString().slice(0,5);
      m[t] ||= {};
      m[t][time] = a;
    }
    return m;
  }, [appts]);

  const cycleStatus = (s: Appt['status']) => {
    if (s === 'SCHEDULED') return 'PRESENT';
    if (s === 'PRESENT') return 'CANCELLED_ON_TIME';
    if (s === 'CANCELLED_ON_TIME') return 'NO_SHOW';
    return 'SCHEDULED';
  };

  const onClickCell = async (appt?: Appt) => {
    if (!appt) return; // κενό slot, δεν κάνουμε τίποτα
    // Επιτρέπουμε αλλαγή μόνο από admin ή τον κάτοχο-θεραπευτή
    if (!isAdmin && appt.therapist_id !== me?.id) return;

    const newStatus = cycleStatus(appt.status);
    const { error } = await supabase
      .from('appointments')
      .update({ status: newStatus })
      .eq('id', appt.id);
    if (!error) {
      setAppts(prev => prev.map(x => x.id === appt.id ? {...x, status: newStatus} : x));
    } else {
      alert('Αποτυχία αλλαγής κατάστασης: ' + error.message);
    }
  };

  if (loading) {
    return <div style={{padding:24}}>Φόρτωση…</div>;
  }

  return (
    <div style={{padding:20}}>
      <header style={{display:'flex',alignItems:'center',gap:12,marginBottom:16}}>
        <h2 style={{margin:0}}>Ημερήσιο πρόγραμμα</h2>
        <input type="date" value={date} onChange={e=>setDate(e.target.value)} />
        <div style={{marginLeft:'auto'}}>
          {isAdmin ? <strong>Διαχειριστής</strong> : <span>Θεραπευτής</span>} — {me?.full_name ?? '—'}
          {isAdmin && (
            <>
              <button onClick={()=>router.push('/clients/new')} style={{marginLeft:8, padding:'8px 12px', borderRadius:8, border:'none', background:'#16a34a', color:'#fff', fontWeight:600}}>
                + Νέος πελάτης
              </button>
              <button onClick={()=>router.push('/admin/clients')} style={{marginLeft:8, padding:'8px 12px', borderRadius:8, border:'1px solid #ddd', background:'#fff'}}>
                Πελάτες
              </button>
            </>
          )}
          <button onClick={async ()=>{
            await supabase.auth.signOut();
            router.push('/login');
          }} style={{marginLeft:8, padding:'8px 12px', borderRadius:8, border:'1px solid #ddd', background:'#fff'}}>
            Έξοδος
          </button>
        </div>
      </header>

      <div style={{display:'grid', gridTemplateColumns:`120px repeat(${therapists.length}, 1fr)`, gap:8}}>
        <div />
        {therapists.map(t => <div key={t.id} style={{fontWeight:600}}>{t.full_name}</div>)}
        {slots.map(time => (
          <React.Fragment key={time}>
            <div style={{padding:'8px 4px',fontWeight:600,opacity:0.8}}>{time}</div>
            {therapists.map(t => {
              const a = mapByTherapist[t.id]?.[time];
              const bg = !a ? '#fafafa'
                : a.status === 'PRESENT' ? '#e0ffe7'
                : a.status === 'CANCELLED_ON_TIME' ? '#fff7db'
                : a.status === 'NO_SHOW' ? '#ffe0e0'
                : '#e8f1ff';
              const label = a?.clients?.full_name ?? '';
              return (
                <div
                  key={`${t.id}-${time}`}
                  onClick={()=>onClickCell(a)}
                  style={{padding:8, background:bg, border:'1px solid #eee', borderRadius:8, minHeight:42, cursor: a ? 'pointer' : 'default'}}
                  title={a ? `Κλικ για αλλαγή κατάστασης (${a.status})` : ''}
                >
                  <span>{label}</span>
                </div>
              );
            })}
          </React.Fragment>
        ))}
      </div>

      <div style={{marginTop:16, opacity:0.8, fontSize:14}}>
        <strong>Υπόμνημα:</strong> Κλικ επάνω στο ραντεβού για αλλαγή κατάστασης —
        <span style={{background:'#e0ffe7', padding:'2px 6px', border:'1px solid #ddd', borderRadius:6, marginLeft:6}}>PRESENT</span>
        <span style={{background:'#fff7db', padding:'2px 6px', border:'1px solid #ddd', borderRadius:6, marginLeft:6}}>CANCELLED_ON_TIME</span>
        <span style={{background:'#ffe0e0', padding:'2px 6px', border:'1px solid #ddd', borderRadius:6, marginLeft:6}}>NO_SHOW</span>
        <span style={{background:'#e8f1ff', padding:'2px 6px', border:'1px solid #ddd', borderRadius:6, marginLeft:6}}>SCHEDULED</span>
      </div>
    </div>
  );
}
