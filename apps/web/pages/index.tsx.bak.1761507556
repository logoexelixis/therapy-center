import React, { useEffect, useMemo, useState } from 'react';
import { useRouter } from 'next/router';
import { supabase } from '../lib/supabaseClient';

// ****** ΡΥΘΜΙΣΕΙΣ ΩΡΑΡΙΟΥ ****** //
// 13:30–15:45, διάλειμμα 15:45–16:15, 16:15–21:30, ανά 45'
function makeDaySlots() {
  const times: string[] = [];
  const toStr = (d: Date) => d.toTimeString().slice(0,5);
  const pushRange = (start: string, end: string) => {
    const [sh, sm] = start.split(':').map(Number);
    const [eh, em] = end.split(':').map(Number);
    const d = new Date();
    d.setHours(sh, sm, 0, 0);
    const endD = new Date();
    endD.setHours(eh, em, 0, 0);
    while (d <= endD) {
      times.push(toStr(d));
      d.setMinutes(d.getMinutes() + 45);
    }
  };
  pushRange('13:30', '15:45');
  pushRange('16:15', '21:30');
  return times;
}

// Κυκλική εναλλαγή κατάστασης με κλικ
const STATUS_CYCLE: Array<'SCHEDULED'|'PRESENT'|'CANCELLED_ON_TIME'|'NO_SHOW'> = [
  'SCHEDULED', 'PRESENT', 'CANCELLED_ON_TIME', 'NO_SHOW'
];
function nextStatus(s?: string) {
  const i = STATUS_CYCLE.indexOf((s as any) ?? 'SCHEDULED');
  if (i === -1) return 'SCHEDULED';
  return STATUS_CYCLE[(i + 1) % STATUS_CYCLE.length];
}

// Επιθυμητή Σειρά Θεραπευτών
const ORDER = [
  'Τσάλη Χριστίνα',
  'Χοτζάρ Οζτζάν',
  'Μπατζάκ Χαρούν',
  'Παπαδοπούλου Ηλιάνα',
  'Γεωργιάδου Χριστίνα',
  'Κοτζά Ναζλή',
  'Μουμίν Φατμέ',
  'Ποιμενίδου Μαρία',
];

export default function Home() {
  const router = useRouter();
  const [date, setDate] = useState<string>(() => new Date().toISOString().slice(0,10));
  const [me, setMe] = useState<any>(null);
  const [therapists, setTherapists] = useState<any[]>([]);
  const [appts, setAppts] = useState<any[]>([]);
  const [savingId, setSavingId] = useState<string | null>(null);
  const slots = useMemo(()=>makeDaySlots(),[]);

  // Έλεγχος συνεδρίας + φόρτωση εμένα & θεραπευτών
  useEffect(() => {
    const sub = supabase.auth.onAuthStateChange((_event, session)=> {
      if (!session) router.replace('/login');
    });
    (async () => {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) { router.replace('/login'); return; }

      // ποιος είμαι (θεραπευτής/admin)
      const { data: meRows } = await supabase
        .from('therapists')
        .select('*')
        .eq('auth_user_id', user.id)
        .limit(1);
      const meRow = meRows?.[0] ?? null;
      setMe(meRow);

      // όλοι οι θεραπευτές (RLS θα φιλτράρει αν είσαι θεραπευτής)
      const { data: th, error: thErr } = await supabase
        .from('therapists')
        .select('id, full_name')
        .order('full_name');
      if (thErr) {
        console.error('therapists error', thErr.message);
      }
      setTherapists(th ?? []);
    })();
    return () => { sub.data?.subscription.unsubscribe(); };
  }, [router]);

  // Ραντεβού ημέρας
  useEffect(() => {
    (async () => {
      const { data, error } = await supabase
        .from('appointments')
        .select('id, therapist_id, client_id, start_dt, status, is_paid, clients(full_name)')
        .gte('start_dt', `${date}T00:00:00.000Z`)
        .lte('start_dt', `${date}T23:59:59.999Z`);
      if (error) {
        console.error('appointments error', error.message);
      }
      setAppts(data ?? []);
    })();
  }, [date]);

  // Map ανά θεραπευτή & ώρα
  const mapByTherapist: Record<string, Record<string, any>> = useMemo(()=>{
    const m: Record<string, Record<string, any>> = {};
    for (const a of appts) {
      const t = a.therapist_id;
      const time = new Date(a.start_dt).toTimeString().slice(0,5);
      m[t] ||= {};
      m[t][time] = a;
    }
    return m;
  }, [appts]);

  // Σταθερή σειρά θεραπευτών
  const visibleTherapists = useMemo(() => {
    const idx = (name: string) => {
      const i = ORDER.indexOf(name);
      return i === -1 ? 999 : i;
    };
    return [...therapists].sort((a,b)=> idx(a.full_name) - idx(b.full_name));
  }, [therapists]);

  // Click σε ραντεβού -> εναλλαγή status & αποθήκευση
  const onToggleStatus = async (a: any) => {
    if (!a?.id) return;
    setSavingId(a.id);
    const newStatus = nextStatus(a.status);
    const { error } = await supabase
      .from('appointments')
      .update({ status: newStatus })
      .eq('id', a.id);
    if (error) {
      alert(`Αποτυχία ενημέρωσης: ${error.message}`);
      setSavingId(null);
      return;
    }
    // τοπικό refresh
    setAppts(prev => prev.map(x => x.id === a.id ? { ...x, status: newStatus } : x));
    setSavingId(null);
  };

  return (
    <div style={{padding:20}}>
      <header style={{display:'flex',alignItems:'center',gap:12,marginBottom:16}}>
        <h2 style={{margin:0}}>Ημερήσιο πρόγραμμα</h2>
        <input type="date" value={date} onChange={e=>setDate(e.target.value)} />
        <div style={{marginLeft:'auto'}}>
          {me?.is_admin ? <strong>Διαχειριστής</strong> : <span>Θεραπευτής</span>} – {me?.full_name ?? '—'}
        </div>
        {me?.is_admin && (
          <>
            <button onClick={()=>router.push('/clients/new')} style={{marginLeft:8, padding:'8px 12px', borderRadius:8, border:'none', background:'#16a34a', color:'#fff', fontWeight:600}}>
              + Νέος πελάτης
            </button>
            <button onClick={()=>router.push('/admin/clients')} style={{marginLeft:8, padding:'8px 12px', borderRadius:8, border:'1px solid #ddd'}}>
              Πελάτες / Εξαγωγή
            </button>
          </>
        )}
        <button onClick={async()=>{ await supabase.auth.signOut(); router.replace('/login'); }} style={{marginLeft:8, padding:'8px 12px', borderRadius:8, border:'1px solid #ddd'}}>
          Έξοδος
        </button>
      </header>

      <div style={{display:'grid', gridTemplateColumns:`120px repeat(${visibleTherapists.length}, 1fr)`, gap:8}}>
        <div />
        {visibleTherapists.map(t => <div key={t.id} style={{fontWeight:600}}>{t.full_name}</div>)}
        {slots.map(time => (
          <React.Fragment key={time}>
            <div style={{padding:'8px 4px',fontWeight:600,opacity:0.8}}>{time}</div>
            {visibleTherapists.map(t => {
              const a = mapByTherapist[t.id]?.[time];
              const bg = !a ? '#fafafa'
                : a.status === 'PRESENT' ? '#e0ffe7'
                : a.status === 'CANCELLED_ON_TIME' ? '#fff7db'
                : a.status === 'NO_SHOW' ? '#ffe0e0'
                : '#e8f1ff';
              const label = a?.clients?.full_name ?? '';

              return (
                <div
                  key={`${t.id}-${time}`}
                  style={{
                    padding:8,
                    background:bg,
                    border:'1px solid #eee',
                    borderRadius:8,
                    minHeight:42,
                    cursor: a ? 'pointer' : 'default',
                    opacity: savingId === a?.id ? 0.6 : 1
                  }}
                  onClick={() => a && onToggleStatus(a)}
                  title={a ? 'Κλικ για αλλαγή κατάστασης' : undefined}
                >
                  <span>{label}</span>
                </div>
              );
            })}
          </React.Fragment>
        ))}
      </div>

      <div style={{marginTop:16, opacity:0.8, fontSize:14}}>
        <strong>Υπόμνημα:</strong> Κλικ επάνω στο ραντεβού για αλλαγή κατάστασης —
        <span style={{background:'#e0ffe7', padding:'2px 6px', border:'1px solid #ddd', borderRadius:6, marginLeft:6}}>PRESENT</span>
        <span style={{background:'#fff7db', padding:'2px 6px', border:'1px solid #ddd', borderRadius:6, marginLeft:6}}>CANCELLED_ON_TIME</span>
        <span style={{background:'#ffe0e0', padding:'2px 6px', border:'1px solid #ddd', borderRadius:6, marginLeft:6}}>NO_SHOW</span>
        <span style={{background:'#e8f1ff', padding:'2px 6px', border:'1px solid #ddd', borderRadius:6, marginLeft:6}}>SCHEDULED</span>
      </div>
    </div>
  );
}
